configs:
  Debug: debug
  Release: release
options:
  bundleIdPrefix: codes.codebase # Any target that doesn't have an PRODUCT_BUNDLE_IDENTIFIER will get an autogenerated one by combining bundleIdPrefix and the target name
  developmentLanguage: en # fastlane pull_and_process_strings and the strings_enum_generator action promote en-US / de-DE languages to it's base language EN / DE with fallback key-value pairs
settingGroups:
  #Settings group for project
  BaseProjectSetting:
    CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED: true
  #Settings group for target
  BaseTargetSetting:
    base:
    # Architectures
      SDKROOT: iphoneos
      # VALID_ARCHS: "armv7 armv7s arm64" ### default is fine, no need for this.
    # Build Options
      ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES: $(inherited)
      DEBUG_INFORMATION_FORMAT: dwarf-with-dsym
    # we can export it with Xcode(12.5) on the CI
      ENABLE_BITCODE: true
    # Deployment
      IPHONEOS_DEPLOYMENT_TARGET: 13.1
      TARGETED_DEVICE_FAMILY: 1 # 1 = iPhone, 2 = iPad
    # Linking
      LD_RUNPATH_SEARCH_PATHS: "$(inherited) @executable_path/Frameworks @loader_path/Frameworks"
    # Packaging
      DEFINES_MODULE: true
      # INFOPLIST_FILE:
      # PRODUCT_MODULE_NAME:
      PRODUCT_NAME: "$(TARGET_NAME)"
    # Search Paths
      ALWAYS_SEARCH_USER_PATHS: false
      FRAMEWORK_SEARCH_PATHS: $(inherited)
      HEADER_SEARCH_PATHS: $(inherited)
      LIBRARY_SEARCH_PATHS: $(inherited)
    # Signing
      # CODE_SIGN_ENTITLEMENTS:
      CODE_SIGN_STYLE: Manual
      # DEVELOPMENT_TEAM: RFD975DSR9
    # Versioning
      CURRENT_PROJECT_VERSION: 1
      VERSIONING_SYSTEM: apple-generic
      MARKETING_VERSION: 0.1.0
    # Apple LLVM 9.0 - Code Generation
      GCC_GENERATE_DEBUGGING_SYMBOLS: true
      GCC_INSTRUMENT_PROGRAM_FLOW_ARCS: false
      GCC_NO_COMMON_BLOCKS: true
    # Apple LLVM 9.0 - Custom Compiler Flags
      OTHER_CFLAGS: $(inherited)
    # Apple LLVM 9.0 - Language
      GCC_PRECOMPILE_PREFIX_HEADER: true
      # GCC_PREFIX_HEADER: $(SRCROOT)/Path/To/PCH
    # Apple LLVM 9.0 - Language - Modules
      CLANG_ENABLE_MODULES: true
    # Apple LLVM 9.0 - Warnings - All languages
      GCC_WARN_UNUSED_FUNCTION: true
      GCC_WARN_UNUSED_LABEL: true
      GCC_WARN_UNUSED_PARAMETER: true
      GCC_WARN_UNUSED_VARIABLE: true
    # Swift Compiler - General
      # SWIFT_OBJC_BRIDGING_HEADER: $(SRCROOT)/Path/To/Header
    # Swift Compiler - Language
      SWIFT_VERSION: 5.0
      ONLY_ACTIVE_ARCH: true

    # User-Defined
      COMPRESS_PNG_FILES: false
      CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF: true
      CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS: true
      CLANG_ANALYZER_LOCALIZABILITY_NONLOCALIZED: true
      CLANG_ANALYZER_LOCALIZABILITY_EMPTY_CONTEXT: true

    # no need for plain asserts
      ENABLE_NS_ASSERTIONS: false

    #
    configs:
      Debug:
        ENABLE_TESTABILITY: true
        LLVM_LTO: false
        OTHER_SWIFT_FLAGS: "$(inherited) -DDEBUG -Xfrontend -debug-time-function-bodies -Xfrontend -warn-long-function-bodies=400 -Xfrontend -warn-long-expression-type-checking=400"
        OTHER_LDFLAGS: "$(inherited) -ObjC -all_load -lz"
        ONLY_ACTIVE_ARCH: true
        SWIFT_OPTIMIZATION_LEVEL: -Onone
        SWIFT_COMPILATION_MODE: incremental
        DEBUG_INFORMATION_FORMAT: dwarf
        COPY_PHASE_STRIP: false
      Release:
        ENABLE_TESTABILITY: false
        LLVM_LTO: false
        OTHER_SWIFT_FLAGS: "$(inherited) -DRELEASE"
        OTHER_LDFLAGS: "$(inherited) -ObjC -all_load"
        ONLY_ACTIVE_ARCH: true
        SWIFT_OPTIMIZATION_LEVEL: -O
        SWIFT_COMPILATION_MODE: wholemodule
        COPY_PHASE_STRIP: true

